{% extends "layout.twig" %}

{% block body %}
    <div class="p-6 max-w-5xl mx-auto">
        <div class="flex justify-between mb-6">
            <h1 class="text-3xl font-bold">Réservation de Casier</h1>

            {% if user and user["role"] == 'Admin' %}
                <button id="openModalBtn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                    + Ajouter un casier
                </button>
            {% endif %}
        </div>

        <div id="lockersGrid" class="grid grid-cols-4 auto-rows-locker gap-4 mb-8">
            {% for row in lockers %}
                {% for cell in row %}
                    {% if cell.start %}
                        <div
                                class="
        p-4 rounded shadow transition-shadow col-span-{{ cell.colSpan }} row-span-{{ cell.rowSpan }} relative
        {% if cell.locker.lockerStatus == 'free' %}
            bg-green-100 hover:shadow-lg
        {% elseif cell.locker.lockerStatus == 'booked' %}
            bg-yellow-200 opacity-70 cursor-not-allowed
        {% elseif cell.locker.lockerStatus == 'blocked' %}
            bg-red-300 opacity-50 cursor-not-allowed
        {% endif %}
    "
                                {% if cell.locker.lockerSize == 'small' %}
                                    style="height: 150px;"
                                {% else %}
                                    style="height: calc(300px + 1rem);"
                                {% endif %}
                                {% if user and user["role"] != 'Admin' and cell.locker.lockerStatus == 'free' %}
                                    onclick='reserveLocker({{ cell.locker.id|json_encode }})'
                                {% endif %}
                        >
                            <h2 class="text-xl font-semibold mb-2">Casier #{{ cell.locker.lockerNumber }}</h2>
                            <p><strong>Taille:</strong> {{ cell.locker.lockerSize }}</p>
                            <p><strong>Prix:</strong> {{ cell.locker.lockerPrice }} €</p>
                            <p><strong>Statut:</strong>
                                {% if cell.locker.lockerStatus == 'free' %}
                                    <span class="text-green-600 font-bold">Libre</span>
                                {% elseif cell.locker.lockerStatus == 'booked' %}
                                    <span class="text-yellow-800 font-semibold">Réservé</span>
                                {% elseif cell.locker.lockerStatus == 'blocked' %}
                                    <span class="text-red-700 font-semibold">Bloqué</span>
                                {% endif %}
                            </p>

                            {% if user and user["role"] == 'Admin' %}
                                <div class="absolute bottom-2 right-2 flex gap-3">
                                    <button class="edit-btn bg-yellow-400 hover:bg-yellow-500 text-white px-2 py-2 rounded text-sm flex items-center"
                                            data-id="{{ cell.locker._id }}"
                                            data-locker-number="{{ cell.locker.lockerNumber }}"
                                            data-locker-size="{{ cell.locker.lockerSize }}"
                                            data-locker-price="{{ cell.locker.lockerPrice }}"
                                            data-locker-status="{{ cell.locker.lockerStatus }}">
                                        <i data-lucide="pencil" class="w-6 h-6"></i>
                                    </button>

                                    <button class="delete-btn bg-red-500 hover:bg-red-600 text-white px-2 py-2 rounded text-sm flex items-center"
                                            data-id="{{ cell.locker.id }}">
                                        <i data-lucide="trash-2" class="w-6 h-6"></i>
                                    </button>
                                </div>
                            {% endif %}
                        </div>

                    {% endif %}
                {% endfor %}
            {% endfor %}
        </div>
    </div>


    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded shadow-md w-96 relative">
            <button id="closeEditModalBtn" class="absolute top-2 right-2 text-gray-500 hover:text-black text-lg">
                &times;
            </button>
            <h2 class="text-xl font-bold mb-4">Modifier le Casier</h2>
            <form id="editLockerForm">
                <input type="hidden" name="lockerId">
                <label class="block mb-2">Numéro du casier</label>
                <input type="number" name="lockerNumber" class="w-full p-2 border rounded mb-4" required>
                <label class="block mb-2">Taille</label>
                <select name="lockerSize" class="w-full p-2 border rounded mb-4" required>
                    <option value="small">Petit</option>
                    <option value="medium">Moyen</option>
                    <option value="large">Grand</option>
                </select>
                <label class="block mb-2">Prix (€)</label>
                <input type="number" name="lockerPrice" step="0.01" class="w-full p-2 border rounded mb-4" required>

                <label class="block mb-2">Statut</label>
                <select name="lockerStatus" class="w-full p-2 border rounded mb-4" required>
                    <option value="free">Libre</option>
                    <option value="booked">Réservé</option>
                    <option value="blocked">Bloqué</option>
                </select>

                <button type="submit" class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
                    Modifier
                </button>
            </form>
        </div>
    </div>

    <div id="modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded shadow-md w-96 relative">
            <button id="closeModalBtn" class="absolute top-2 right-2 text-gray-500 hover:text-black text-lg">&times;
            </button>
            <h2 class="text-xl font-bold mb-4">Ajouter un Casier</h2>
            <form id="createLockerForm">
                <p id="formError" class="text-red-500 text-sm mb-4 hidden"></p>

                <label class="block mb-2">Numéro du casier</label>
                <input type="number" name="lockerNumber" class="w-full p-2 border rounded mb-4" required>

                <label class="block mb-2">Taille</label>
                <select name="lockerSize" class="w-full p-2 border rounded mb-4" required>
                    <option value="small">Petit</option>
                    <option value="medium">Moyen</option>
                    <option value="large">Grand</option>
                </select>

                <label class="block mb-2">Prix (€)</label>
                <input type="number" name="lockerPrice" step="0.01" class="w-full p-2 border rounded mb-4" required>

                <button type="submit" class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
                    Créer
                </button>
            </form>
        </div>
    </div>
{% endblock %}

 {% block javascripts %}
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
     <script src="https://unpkg.com/lucide@latest"></script>
     <script>
         window.addEventListener('DOMContentLoaded', () => {
             lucide.createIcons();

             const openModalBtn = document.getElementById('openModalBtn');
             const closeModalBtn = document.getElementById('closeModalBtn');
             const modal = document.getElementById('modal');
             const form = document.getElementById('createLockerForm');
             const errorParagraph = document.getElementById('formError');

             const editModal = document.getElementById('editModal');
             const closeEditModalBtn = document.getElementById('closeEditModalBtn');
             const editForm = document.getElementById('editLockerForm');

             if (!openModalBtn || !closeModalBtn || !modal || !form || !editModal || !editForm || !closeEditModalBtn) {
                 console.error('Éléments introuvables dans le DOM');
                 return;
             }

             errorParagraph.classList.add('hidden');
             errorParagraph.textContent = '';

             openModalBtn.addEventListener('click', () => modal.classList.remove('hidden'));
             closeModalBtn.addEventListener('click', () => modal.classList.add('hidden'));

             form.addEventListener('submit', async function (e) {
                 e.preventDefault();
                 const data = {
                     lockerNumber: form.lockerNumber.value,
                     lockerSize: form.lockerSize.value,
                     lockerPrice: form.lockerPrice.value
                 };

                 const res = await fetch('/api/lockers/create', {
                     method: 'POST',
                     headers: {'Content-Type': 'application/json'},
                     body: JSON.stringify(data)
                 });

                 if (res.ok) {
                     modal.classList.add('hidden');
                     location.reload();
                 } else {
                     const err = await res.json();
                     errorParagraph.textContent = err.error || 'Erreur inconnue';
                     errorParagraph.classList.remove('hidden');
                 }
             });

             document.querySelectorAll('.delete-btn').forEach(btn => {
                 btn.addEventListener('click', async () => {
                     const lockerId = btn.dataset.id;

                     const result = await Swal.fire({
                         title: 'Supprimer ce casier ?',
                         text: 'Cette action est irréversible.',
                         icon: 'warning',
                         showCancelButton: true,
                         confirmButtonText: 'Oui, supprimer',
                         cancelButtonText: 'Annuler'
                     });

                     if (result.isConfirmed) {
                         const res = await fetch(`/api/lockers/${lockerId}`, {
                             method: 'DELETE'
                         });

                         if (res.ok) {
                             Swal.fire({
                                 title: 'Supprimé !',
                                 text: 'Le casier a été supprimé avec succès.',
                                 icon: 'success',
                                 confirmButtonText: 'OK',
                                 timer: 2000,
                             })
                                 .then(() => {
                                     location.reload();
                                 });
                         } else Swal.fire({
                             title: 'Erreur',
                             text: 'La suppression a échoué.',
                             icon: 'error',
                             confirmButtonText: 'OK'
                         });
                     }
                 });
             });

             document.querySelectorAll('.edit-btn').forEach(btn => {
                 btn.addEventListener('click', () => {
                     editForm.lockerId.value = btn.dataset.id;
                     editForm.lockerNumber.value = btn.dataset.lockerNumber;
                     editForm.lockerSize.value = btn.dataset.lockerSize;
                     editForm.lockerPrice.value = btn.dataset.lockerPrice;
                     editForm.lockerStatus.value = btn.dataset.lockerStatus;
                     editModal.classList.remove('hidden');
                 });
             });

             closeEditModalBtn.addEventListener('click', () => {
                 editModal.classList.add('hidden');
             });

             editForm.addEventListener('submit', async e => {
                 e.preventDefault();

                 const lockerId = editForm.lockerId.value;
                 const data = {
                     lockerNumber: editForm.lockerNumber.value,
                     lockerSize: editForm.lockerSize.value,
                     lockerPrice: editForm.lockerPrice.value,
                     lockerStatus: editForm.lockerStatus.value
                 };

                 const res = await fetch(`/api/lockers/${lockerId}`, {
                     method: 'PUT',
                     headers: {'Content-Type': 'application/json'},
                     body: JSON.stringify(data)
                 });

                 const result = await res.json();

                 if (res.ok) {
                     editModal.classList.add('hidden');
                     location.reload();
                 } else {
                     Swal.fire({
                         title: 'Erreur',
                         text: result.error || 'La modification a échoué.',
                         icon: 'error',
                         confirmButtonText: 'OK'
                     });
                 }
             });
         });

         // JavaScript (Client-Side)
         async function reserveLocker(lockerId) {
             try {
                 const resultSwal = await Swal.fire({
                     title: 'Durée de réservation',
                     html:
                         `<select id="duration" class="swal2-select" style="width: 60%; padding: 0.5rem;">
                     <option value="" disabled selected>Choisissez la durée</option>
                     <option value="1">1 heure</option>
                     <option value="2">2 heures</option>
                     <option value="4">4 heures</option>
                     <option value="8">8 heures</option>
                     <option value="24">24 heures</option>
                 </select>`,
                     focusConfirm: false,
                     showCancelButton: true,
                     confirmButtonText: 'Valider la réservation',
                     cancelButtonText: 'Annuler',
                     icon: 'question',
                     preConfirm: () => {
                         const duration = document.getElementById('duration').value;
                         if (!duration) {
                             Swal.showValidationMessage('Veuillez choisir une durée.');
                             return false;
                         }
                         return {duration};
                     }
                 });

                 if (resultSwal.isConfirmed) {
                     const {duration} = resultSwal.value;

                     const response = await fetch('/payment/create-payment-intent', {
                         method: 'POST',
                         headers: {
                             'Content-Type': 'application/json',
                         },
                         body: JSON.stringify({lockerId, duration, userId: {{ user.id|json_encode }} }),
                     });

                     const data = await response.json();

                     if (data.url) {
                         window.location.href = data.url;
                     } else {
                         Swal.fire({
                             icon: 'error',
                             title: 'Erreur',
                             text: data.error || 'Impossible de créer le paiement.'
                         });
                     }
                 }
             } catch (error) {
                 console.error('Network error:', error);
                 Swal.fire({
                     icon: 'error',
                     title: 'Erreur réseau',
                     text: 'Une erreur est survenue lors de la réservation.'
                 });
             }
         }

     </script>
 {% endblock %}